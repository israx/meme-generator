{"version":3,"sources":["trollface.png","pedobear.jpg","serviceWorker.js","header.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","src","Troll","alt","App","useState","top","setTop","bottom","setBottom","memes","setMemes","Pedobear","memeUrl","setUrl","handleChange","e","target","value","name","useEffect","fetch","then","response","json","data","onSubmit","preventDefault","randomIndex","Math","floor","random","length","randomUrl","url","type","placeholder","onChange","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,sKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BCPSC,MATf,WACE,OACE,4BAAQC,UAAU,UAChB,yBAAKC,IAAKC,IAAOC,IAAI,eACrB,wBAAIH,UAAU,iBAAd,oB,kCC0DSI,MA1Df,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNC,EADM,KACDC,EADC,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIaN,mBAASO,KAJtB,mBAINC,EAJM,KAIGC,EAJH,KAKb,SAASC,EAAaC,GAAI,IAAD,EACCA,EAAEC,OAAlBC,EADe,EACfA,MAAOC,EADQ,EACRA,KAEF,QAATA,GAAgBZ,EAAOW,GACd,WAATC,GAAmBV,EAAUS,GAoBnC,OAfAE,qBAAU,WACMC,MAAM,qCACjBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACJ,GACLP,EAASO,EAAMO,KAAKf,YAEvB,IAUD,6BACE,kBAAC,EAAD,MACA,0BAAMV,UAAU,OAAO0B,SAV3B,SAAsBV,GACpBA,EAAEW,iBACF,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWrB,EAAMsB,QAC/CC,EAAYvB,EAAMkB,GAAaM,IAErCpB,EAAOmB,KAMH,2BACEE,KAAK,OACLC,YAAY,MACZC,SAAUtB,EACVG,MAAOZ,EACPa,KAAK,QAEP,2BACEgB,KAAK,OACLC,YAAY,SACZC,SAAUtB,EACVG,MAAOV,EACPW,KAAK,WAEP,4BAAQmB,QAnCd,cAmCM,SAEF,yBAAKtC,UAAU,kBACb,wBAAIA,UAAU,aAAaM,GAC3B,yBAAKL,IAAKY,IACV,wBAAIb,UAAU,gBAAgBQ,MCpDtC+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SH6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b7758142.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trollface.be324d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/pedobear.a1a5fd7c.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport Troll from \"./trollface.png\";\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <img src={Troll} alt=\"meme-troll\" />\n      <h1 className=\"header__title\">Meme Generator</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./header\";\nimport \"./App.css\";\nimport Pedobear from \"./pedobear.jpg\";\nimport { render } from \"@testing-library/react\";\n\nfunction App() {\n  const [top, setTop] = useState(\"\");\n  const [bottom, setBottom] = useState(\"\");\n  const [memes, setMemes] = useState(\"\");\n  const [memeUrl, setUrl] = useState(Pedobear);\n  function handleChange(e) {\n    const { value, name } = e.target;\n\n    if (name === \"top\") setTop(value);\n    if (name === \"bottom\") setBottom(value);\n  }\n\n  function handleClick() {}\n\n  useEffect(() => {\n    const memes = fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((value) => {\n        setMemes(value.data.memes);\n      });\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const randomIndex = Math.floor(Math.random() * memes.length);\n    const randomUrl = memes[randomIndex].url;\n\n    setUrl(randomUrl);\n  }\n  return (\n    <div>\n      <Header />\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Top\"\n          onChange={handleChange}\n          value={top}\n          name=\"top\"\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Bottom\"\n          onChange={handleChange}\n          value={bottom}\n          name=\"bottom\"\n        />\n        <button onClick={handleClick}>MEME</button>\n      </form>\n      <div className=\"meme-container\">\n        <h1 className=\"title top\">{top}</h1>\n        <img src={memeUrl} />\n        <h1 className=\"title bottom\">{bottom}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}